<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ’° Acciones ðŸ’°</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400;500&display=swap');
        
        :root {
            --primary-neon: #00ff88;
            --secondary-neon: #004d29;
            --accent-neon: #00ffcc;
            --bg-dark: #001a0d;
            --bg-darker: #000d07;
            --text-color: #e0ffe0;
            --card-bg: rgba(0, 26, 13, 0.9);
            --success-color: #00ff88;
            --danger-color: #ff3366;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: var(--bg-darker);
            min-height: 100vh;
            color: var(--text-color);
            background-image: 
                linear-gradient(45deg, rgba(0, 255, 136, 0.1) 0%, rgba(0, 77, 41, 0.1) 100%),
                repeating-linear-gradient(45deg, rgba(0, 255, 136, 0.05) 0px, rgba(0, 255, 136, 0.05) 1px, transparent 1px, transparent 10px);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--primary-neon);
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .forex-widget {
            background: rgba(0, 26, 13, 0.8);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid var(--accent-neon);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .forex-value {
            font-family: 'Orbitron', sans-serif;
            color: var(--primary-neon);
            font-size: 1.2rem;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid var(--primary-neon);
            box-shadow: 0 0 15px rgba(0, 255, 136, 0.1);
        }

        .balance-card {
            grid-column: 1 / -1;
            text-align: center;
        }

        .balance-amount {
            font-size: 3rem;
            font-family: 'Orbitron', sans-serif;
            color: var(--primary-neon);
            margin: 20px 0;
            text-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
        }

        .section-title {
            font-family: 'Orbitron', sans-serif;
            color: var(--accent-neon);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .transaction-form {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .input-group {
            flex: 1;
        }

        input, select, button {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--primary-neon);
            background: rgba(0, 26, 13, 0.8);
            color: var(--text-color);
            font-size: 1rem;
        }

        button {
            background: var(--primary-neon);
            color: var(--bg-dark);
            border: none;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        button:hover {
            background: var(--accent-neon);
            box-shadow: 0 0 15px var(--primary-neon);
        }

        .transaction-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid rgba(0, 255, 136, 0.2);
            margin-bottom: 5px;
        }

        .transaction-amount {
            font-family: 'Orbitron', sans-serif;
        }

        .income {
            color: var(--success-color);
        }

        .expense {
            color: var(--danger-color);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: rgba(0, 26, 13, 0.8);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid var(--accent-neon);
        }

        .stat-value {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.5rem;
            color: var(--primary-neon);
            margin: 5px 0;
        }

        @media (max-width: 768px) {
            .transaction-form {
                flex-direction: column;
            }
            
            .header {
                flex-direction: column;
                text-align: center;
            }
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--bg-dark);
            padding: 30px;
            border-radius: 15px;
            border: 1px solid var(--primary-neon);
            box-shadow: 0 0 30px rgba(0, 255, 136, 0.3);
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close-modal {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.5rem;
            cursor: pointer;
        }

        .history-section {
            margin-bottom: 20px;
            padding: 15px;
            background: rgba(0, 26, 13, 0.8);
            border-radius: 10px;
            border: 1px solid var(--accent-neon);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .history-list {
            max-height: 200px;
            overflow-y: auto;
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ’° Control Financiero Personal</h1>
            <div class="forex-widget">
                <i class="fas fa-dollar-sign"></i>
                <span>USD/MXN:</span>
                <span class="forex-value" id="usdmxn">Loading...</span>
            </div>
        </div>

        <div class="dashboard">
            <div class="card balance-card">
                <h2 class="section-title">
                    <i class="fas fa-wallet"></i>
                    Balance Total
                </h2>
                <div class="balance-amount" id="totalBalance">$0.00</div>
                <div class="stats-grid">
                    <div id="historyModal" class="modal">
                        <div class="modal-content">
                            <button class="close-modal" onclick="closeHistoryModal()">&times;</button>
                            <h2 class="section-title">Historial Detallado</h2>
                            
                            <div class="history-section">
                                <div class="section-header">
                                    <h3>Ingresos</h3>
                                    <div class="stat-value" id="historyIncome">$0.00</div>
                                </div>
                                <div class="history-list" id="incomeHistory"></div>
                            </div>
                
                            <div class="history-section">
                                <div class="section-header">
                                    <h3>Gastos</h3>
                                    <div class="stat-value" id="historyExpenses">$0.00</div>
                                </div>
                                <div class="history-list" id="expenseHistory"></div>
                            </div>
                
                            <div class="history-section">
                                <div class="section-header">
                                    <h3>Ahorros</h3>
                                    <div class="stat-value" id="historySavings">$0.00</div>
                                </div>
                                <div class="history-list" id="savingsHistory"></div>
                            </div>
                
                            <div class="history-section">
                                <div class="section-header">
                                    <h3>Inversiones</h3>
                                    <div class="stat-value" id="historyInvestments">$0.00</div>
                                </div>
                                <div class="history-list" id="investmentHistory"></div>
                            </div>
                        </div>
                    </div>
                
                </div>
            </div>

            <div class="card">
                <h2 class="section-title">
                    <i class="fas fa-plus-circle"></i>
                    Nueva TransacciÃ³n
                </h2>
                <div class="transaction-form">
                    <div class="input-group">
                        <input type="number" id="amount" placeholder="Cantidad" step="0.01">
                    </div>
                    <div class="input-group">
                        <select id="type">
                            <option value="income">Ingreso</option>
                            <option value="expense">Gasto</option>
                            <option value="saving">Ahorro</option>
                            <option value="investment">InversiÃ³n</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <input type="text" id="description" placeholder="DescripciÃ³n">
                    </div>
                    <button onclick="addTransaction()">Agregar</button>
                </div>
                <div class="transaction-list" id="recentTransactions">
                    <!-- Transactions will be added here -->
                </div>
            </div>
        </div>
    </div>
    <button onclick="showHistoryModal()" style="margin-top: 20px; width: auto;">
        Ver Historial Completo
    </button>
    <script>
        // Initialize data structure with starting balance
        let finances = {
            balance: 40289, // Starting balance
            available: 40289, // Available money (excluding savings and investments)
            income: 0,
            expenses: 0,
            savings: 0,
            investments: 0,
            transactions: [],
            history: {
                income: [],
                expenses: [],
                savings: [],
                investments: []
            }
        };

        // Load data from localStorage
        function loadData() {
            const savedData = localStorage.getItem('financeData');
            if (savedData) {
                finances = JSON.parse(savedData);
            }
            updateUI();
        }

        // Save data to localStorage
        function saveData() {
            localStorage.setItem('financeData', JSON.stringify(finances));
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            }).format(amount);
        }

        // Add new transaction with improved logic
        function addTransaction() {
            const amount = parseFloat(document.getElementById('amount').value);
            const type = document.getElementById('type').value;
            const description = document.getElementById('description').value;

            if (!amount || !description) {
                alert('Por favor ingresa todos los datos');
                return;
            }

            const transaction = {
                id: Date.now(),
                amount,
                type,
                description,
                date: new Date().toISOString()
            };

            // Add to transactions and specific history
            finances.transactions.unshift(transaction);
            finances.history[type + 's'].push(transaction);

            // Update totals based on transaction type
            switch(type) {
                case 'income':
                    finances.income += amount;
                    finances.balance += amount;
                    finances.available += amount;
                    break;
                case 'expense':
                    if (amount > finances.available) {
                        alert('No tienes suficiente dinero disponible para este gasto');
                        return;
                    }
                    finances.expenses += amount;
                    finances.balance -= amount;
                    finances.available -= amount;
                    break;
                case 'saving':
                    if (amount > finances.available) {
                        alert('No tienes suficiente dinero disponible para ahorrar');
                        return;
                    }
                    finances.savings += amount;
                    finances.available -= amount;
                    // Note: balance doesn't change as it's just moving money
                    break;
                case 'investment':
                    if (amount > finances.available) {
                        alert('No tienes suficiente dinero disponible para invertir');
                        return;
                    }
                    finances.investments += amount;
                    finances.available -= amount;
                    // Note: balance doesn't change as it's just moving money
                    break;
            }

            saveData();
            updateUI();
            clearForm();
        }

        // Clear form
        function clearForm() {
            document.getElementById('amount').value = '';
            document.getElementById('description').value = '';
        }

        // Update UI with new calculations
        function updateUI() {
            document.getElementById('totalBalance').textContent = formatCurrency(finances.balance);
            document.getElementById('totalIncome').textContent = formatCurrency(finances.income);
            document.getElementById('totalExpenses').textContent = formatCurrency(finances.expenses);
            document.getElementById('totalSavings').textContent = formatCurrency(finances.savings);
            document.getElementById('totalInvestments').textContent = formatCurrency(finances.investments);

            // Update transactions list
            const transactionsList = document.getElementById('recentTransactions');
            transactionsList.innerHTML = finances.transactions
                .slice(0, 10)
                .map(t => `
                    <div class="transaction-item">
                        <div>
                            <strong>${t.description}</strong>
                            <br>
                            <small>${new Date(t.date).toLocaleDateString()}</small>
                        </div>
                        <div class="transaction-amount ${t.type}">
                            ${t.type === 'income' ? '+' : '-'} ${formatCurrency(t.amount)}
                        </div>
                    </div>
                `).join('');

            updateHistoryModal();
        }

        // Show history modal
        function showHistoryModal() {
            document.getElementById('historyModal').style.display = 'block';
            updateHistoryModal();
        }

        // Close history modal
        function closeHistoryModal() {
            document.getElementById('historyModal').style.display = 'none';
        }

        // Update history modal
        function updateHistoryModal() {
            // Update totals in history
            document.getElementById('historyIncome').textContent = formatCurrency(finances.income);
            document.getElementById('historyExpenses').textContent = formatCurrency(finances.expenses);
            document.getElementById('historySavings').textContent = formatCurrency(finances.savings);
            document.getElementById('historyInvestments').textContent = formatCurrency(finances.investments);

            // Update history lists
            ['income', 'expenses', 'savings', 'investments'].forEach(type => {
                const historyList = document.getElementById(`${type}History`);
                historyList.innerHTML = finances.history[type]
                    .map(t => `
                        <div class="transaction-item">
                            <div>
                                <strong>${t.description}</strong>
                                <br>
                                <small>${new Date(t.date).toLocaleDateString()}</small>
                            </div>
                            <div class="transaction-amount">
                                ${formatCurrency(t.amount)}
                            </div>
                        </div>
                    `).join('');
            });
        }

        // Automatic income every 15 days
        function scheduleAutomaticIncome() {
            const now = new Date();
            const day = now.getDate();
            
            if (day === 15 || day === 30) {
                const transaction = {
                    id: Date.now(),
                    amount: 3000,
                    type: 'income',
                    description: 'Ingreso Quincenal AutomÃ¡tico',
                    date: now.toISOString()
                };

                finances.transactions.unshift(transaction);
                finances.history.income.push(transaction);
                finances.income += 3000;
                finances.balance += 3000;
                finances.available += 3000;
                
                saveData();
                updateUI();
            }
        }

        // Update USD/MXN exchange rate
        async function updateForexRate() {
            try {
                const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
                const data = await response.json();
                const rate = data.rates.MXN;
                document.getElementById('usdmxn').textContent = rate.toFixed(2);
            } catch (error) {
                document.getElementById('usdmxn').textContent = 'Error';
            }
        }

        // Initialize
        loadData();
        updateForexRate();
        scheduleAutomaticIncome();

        // Check for automatic income every hour
        setInterval(scheduleAutomaticIncome, 3600000);
        
        // Update forex rate every hour
        setInterval(updateForexRate, 3600000);

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target === document.getElementById('historyModal')) {
                closeHistoryModal();
            }
        }
    </script>
</body>
</html>


<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸ’° Control Financiero Personal</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400;500&display=swap');
        
        :root {
            --primary-neon: #00ff88;
            --secondary-neon: #004d29;
            --accent-neon: #00ffcc;
            --bg-dark: #001a0d;
            --bg-darker: #000d07;
            --text-color: #e0ffe0;
            --card-bg: rgba(0, 26, 13, 0.9);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: var(--bg-darker);
            color: var(--text-color);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .transaction-form {
            background: var(--card-bg);
            border: 2px solid var(--primary-neon);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.2);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: var(--primary-neon);
            font-weight: bold;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--accent-neon);
            border-radius: 8px;
            background: rgba(0, 26, 13, 0.8);
            color: var(--text-color);
            font-size: 16px;
        }

        .amount-preview {
            font-family: 'Orbitron', sans-serif;
            font-size: 24px;
            color: var(--primary-neon);
            text-align: center;
            padding: 15px;
            border: 2px solid var(--accent-neon);
            border-radius: 8px;
            margin: 15px 0;
            background: rgba(0, 26, 13, 0.8);
        }

        .submit-btn {
            width: 100%;
            padding: 15px;
            background: var(--primary-neon);
            color: var(--bg-dark);
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            background: var(--accent-neon);
            box-shadow: 0 0 15px var(--primary-neon);
        }

        .transaction-preview {
            margin-top: 20px;
            padding: 15px;
            border: 2px solid var(--accent-neon);
            border-radius: 8px;
            background: rgba(0, 26, 13, 0.8);
        }

        .preview-title {
            color: var(--primary-neon);
            font-size: 18px;
            margin-bottom: 10px;
        }

        .preview-detail {
            margin: 5px 0;
            font-family: 'Orbitron', sans-serif;
        }

        .error-message {
            color: #ff3366;
            background: rgba(255, 51, 102, 0.1);
            border: 1px solid #ff3366;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="transaction-form">
            <h2 style="text-align: center; margin-bottom: 20px; color: var(--primary-neon);">
                <i class="fas fa-money-bill-wave"></i> Nueva TransacciÃ³n
            </h2>
            
            <div class="form-group">
                <label for="type">Tipo de TransacciÃ³n</label>
                <select id="type" onchange="updatePreview()">
                    <option value="income">Ingreso</option>
                    <option value="expense">Gasto</option>
                    <option value="saving">Ahorro</option>
                    <option value="investment">InversiÃ³n</option>
                </select>
            </div>

            <div class="form-group">
                <label for="description">DescripciÃ³n</label>
                <input type="text" id="description" placeholder="Ej: Salario mensual" onkeyup="updatePreview()">
            </div>

            <div class="form-group">
                <label for="amount">Cantidad (MXN)</label>
                <input type="number" id="amount" step="0.01" placeholder="0.00" oninput="updatePreview()">
            </div>

            <div class="amount-preview" id="amountPreview">$0.00</div>

            <div class="transaction-preview">
                <div class="preview-title">Vista Previa de la TransacciÃ³n:</div>
                <div class="preview-detail" id="typePreview">Tipo: Ingreso</div>
                <div class="preview-detail" id="descriptionPreview">DescripciÃ³n: -</div>
                <div class="preview-detail" id="balancePreview">Balance Final: $40,289.00</div>
            </div>

            <div class="error-message" id="errorMessage"></div>

            <button class="submit-btn" onclick="processTransaction()">
                <i class="fas fa-check-circle"></i> Confirmar TransacciÃ³n
            </button>
        </div>
    </div>

    <script>
        let currentBalance = 40289.00;

        function formatCurrency(amount) {
            return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            }).format(amount);
        }

        function updatePreview() {
            const type = document.getElementById('type').value;
            const description = document.getElementById('description').value || '-';
            const amount = parseFloat(document.getElementById('amount').value) || 0;

            // Actualizar vista previa del monto
            document.getElementById('amountPreview').textContent = formatCurrency(amount);

            // Actualizar detalles de la transacciÃ³n
            document.getElementById('typePreview').textContent = `Tipo: ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            document.getElementById('descriptionPreview').textContent = `DescripciÃ³n: ${description}`;

            // Calcular y mostrar balance final previsto
            let newBalance = currentBalance;
            if (type === 'expense') {
                newBalance -= amount;
            } else if (type === 'income') {
                newBalance += amount;
            }
            // Para ahorros e inversiones, el balance no cambia ya que es reasignaciÃ³n

            document.getElementById('balancePreview').textContent = `Balance Final: ${formatCurrency(newBalance)}`;
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 3000);
        }

        function processTransaction() {
            const amount = parseFloat(document.getElementById('amount').value);
            const description = document.getElementById('description').value.trim();
            const type = document.getElementById('type').value;

            if (!amount || amount <= 0) {
                showError('Por favor ingrese una cantidad vÃ¡lida');
                return;
            }

            if (!description) {
                showError('Por favor ingrese una descripciÃ³n');
                return;
            }

            // AquÃ­ irÃ­a la lÃ³gica para procesar la transacciÃ³n
            // Por ahora solo mostraremos un mensaje de Ã©xito
            alert(`TransacciÃ³n procesada exitosamente:\nTipo: ${type}\nMonto: ${formatCurrency(amount)}\nDescripciÃ³n: ${description}`);

            // Limpiar el formulario
            document.getElementById('amount').value = '';
            document.getElementById('description').value = '';
            updatePreview();
        }

        // Inicializar la vista previa
        updatePreview();
    </script>
</body>
</html>